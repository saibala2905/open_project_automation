**

To architect a robust MongoDB infrastructure for the App to engage people in healthy communication, we will follow these steps:

1. **Database Schema Design:** We will create four main collections: `User`, `Task`, `TaskCompletion`, and `Points`. Each collection will have fields that match the requirements of the App.

   - **User Schema:**
     ```json
     {
       "_id" : ObjectId,
       "username" : String,
       "email" : String,
       "password_hash" : String,
       "points_balance" : Decimal
     }
     ```
   - **Task Schema:**
     ```json
     {
       "_id" : ObjectId,
       "title" : String,
       "description" : String,
       "type" : String,
       "due_date" : Date
     }
     ```
   - **TaskCompletion Schema:**
     ```json
     {
       "_id" : ObjectId,
       "user_id" : ObjectId,
       "task_id" : ObjectId,
       "completion_date" : Date
     }
     ```
   - **Points Schema:**
     ```json
     {
       "_id" : ObjectId,
       "user_id" : ObjectId,
       "task_id" : ObjectId,
       "points_amount" : Decimal
     }
     ```

2. **Indexing Strategies:** We will create indexes on fields used in WHERE and JOIN clauses to improve query performance.

   - Create an index on `username` for efficient lookup of user documents by username.
   - Create an index on `task_id` for efficient lookup of task documents by ID.
   - Create a compound index on `user_id` and `task_id` to enable efficient lookup of both the user and task that earned points.

3. **Query Optimization:** We will use MongoDB's query optimization techniques, such as:

   - Using `$lookup` aggregation operator to join multiple collections efficiently.
   - Using `$unwind` aggregation operator to flatten arrays in documents.
   - Using `$group` aggregation operator to perform complex aggregations.

4. **Sharding and Replication:** We will configure MongoDB as follows:

   - Shard the `user` collection on the `username` field using the `_id` field as the shard key.
   - Replicate the `task` and `points` collections across multiple shards for high availability and scalability.

**Example Sharding Configuration:**
```javascript
// Configure sharding
var config = {
  sharding: {
    userCollection: {
      key: { username: 1 },
      minShards: 2,
      maxShards: 5
    }
  }
};

// Create shard hosts
for (var i = 0; i < 3; i++) {
  var host = {
    host: `localhost:${i + 1}`,
    port: 27017
  };
  // Add host to list of shard hosts
}

// Start MongoDB on each host
// ...
```
**Example Replication Configuration:**
```javascript
// Configure replication
var config = {
  replication: {
    hosts: [
      { host: 'localhost', port: 27018 },
      { host: 'localhost', port: 27019 }
    ],
    replSetName: 'my-replica-set'
  }
};

// Start MongoDB with replica set configuration
// ...
```
This configuration provides a robust MongoDB infrastructure for the App to engage people in healthy communication, ensuring high availability, scalability, and performance.